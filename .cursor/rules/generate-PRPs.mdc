---
description: How generate PRP's (product requirement prompts) for AI coding agent.
globs: 
alwaysApply: false
---

1. How and where to store PRPs:

  1.1 Always place PRP files in PROJECT_ROOT/.cursor/PRPs/:
    ```
    .cursor/PRPs/
    ├── PRP_{feature-name}.md
    ├── another-PRP-file.md
    └── ...
    ```

  1.2 Follow the naming convention:
    - Use camelCase for filenames
    - Always use .md extension
    - Make names descriptive of the PRPs purpose


2. Introduction to PRPs:

  PRP file is the development feature roadmap, requirement document and also the development steps orchestration guide. A well structured PRP with rich details is enough when given as prompt to AI coding agent to generate the full application codebase, however if needed the AI agent can ask for more info from user.

3. How to generate PRP:

  Generate a complete PRP for general feature implementation with thorough research. Ensure context is passed to the AI agent to enable self-validation and iterative refinement. Read the feature requirement file first to understand what needs to be created, how the examples provided help, and any other considerations.

  The AI agent only gets the context you are appending to the PRP and training data. Assuma the AI agent has access to the codebase and the same knowledge cutoff as you, so its important that your research findings are included or referenced in the PRP. The Agent has Websearch capabilities, so pass urls to documentation and examples.

  Feature requirement file is normally stored in Project_root/.cursor/FeatureRequirement/ and is named like FeatureRequirement.md or similar.

  3.1 Research Process:

    3.1.1 Codebase Analysis:
      - Search for similar features/patterns in the codebase
      - Identify files to reference in PRP
      - Note existing conventions to follow
      - Check test patterns for validation approach

    3.1.2 External Research:
      - Search for similar features/patterns online
      - Library documentation (include specific URLs)
      - Implementation examples (GitHub/StackOverflow/blogs)
      - Best practices and common pitfalls

    3.1.3 User Clarification (if needed):
      - Specific patterns to mirror and where to find them?
      - Integration requirements and where to find them?

  3.2 PRP Generation:
    Using PRPs/templates/prp_base.md as template:

    Critical Context to Include and pass to the AI agent as part of the PRP
      - Documentation: URLs with specific sections
      - Code Examples: Real snippets from codebase
      - Don't miss any requirements and give prompt examples for LLMs.
      - Gotchas: Library quirks, version issues
      - Patterns: Existing approaches to follow

    Implementation Blueprint
      - Start with pseudocode showing approach
      - Reference real files for patterns
      - Include error handling strategy
      - list tasks to be completed to fullfill the PRP in the order they should be completed

    Validation Gates (Must be Executable) eg for python

    # Syntax/Style
    ruff check --fix && mypy .

    # Unit Tests
    uv run pytest tests/ -v
    *** CRITICAL AFTER YOU ARE DONE RESEARCHING AND EXPLORING THE CODEBASE BEFORE YOU START WRITING THE PRP ***

    *** ULTRATHINK ABOUT THE PRP AND PLAN YOUR APPROACH THEN START WRITING THE PRP ***

  3.3 Quality Checklist
    - All necessary context included
    - Validation gates are executable by AI
    - References existing patterns
    - Clear implementation path
    - Error handling documented

4. local version control:
   As you proceed creating files and updating/changing them please record the change log in project rool folder/localversionlog_<application name>.txt

    

Score the PRP on a scale of 1-10 (confidence level to succeed in one-pass implementation using claude codes)

Remember: The goal is one-pass implementation success through comprehensive context.

